package e_oop;

public class OOPBasic {
	
	public static void main(String[] args) {
		
		/*
		 1. OOP(Object-Oriented Programming) - 객체지향프로그래밍
		   - 기존의 프로그래밍 언어에 몇 가지 규칙을 추가하여 발전된 형태이다.
		   - 규칙들을 이용하여 코드간에 서로 관계를 줌으로써 보다 유기적으로 프로그래밍이 구성된다.
		   - 객체지향 언어의 특징
		     : 코드의 재사용성이 높다.
		       새로운 코드를 작성할때 기존의 코드를 이용하여 쉽게 작성할 수 있다.
		     : 코드의 관리가 용이하다.
		       코드간의 관계를 이용하여 적은 노력으로 쉽게 코드를 변경할 수 있다.
		     : 신뢰성이 높은 프로그래밍을 가능하게 한다.
		       
		 2. 클래스와 객체
		   - 클래스란?
		     : 객체를 정의해 놓은 것이다.
		     : 객체의 설계도 또는 틀이다.
		     : Tv설계도    
		       클래스			객체
		      Tv 설계도 		Tv
		       붕어빵기계		붕어빵
		   
		   - 클래스의 선언
		     [접근제어자][지정예약어] class 클래스명[exteds 클래스명][implements 인터페이스명] {     
		 	  public	abstract   class OOPBasic extends Basic implements 
		 	  		
		   - 객체란?
		     : 실제로 존재하는 것, 사물 또는 개념
		      	
		 	 : 객체의 구성요소
		 	   속성(멤버변수, 특성, 필드, 상태)
		 	    크기, 길이, 높이, ...
		 	   기능(메서드, 함수, function, 행위)
		 	    볼륨높이기, 채널변경 ...
		 	    
		 3. 인스턴스란?
		   - 클래스로부터 객체를 만드는 과정을 인스턴스화라 한다.
		   - Tv클래스로부터 만들어진 객체를 Tv클래스의 인스턴스라고 한다.
		   - 인스턴스의 생성방법
		     클래스명 변수명; 			=> 클래스의 객체를 참조하기위한 참조변수를 선언한다.
		     변수명 = new 클래스명();	=> 클래스의 인스턴스를 생성후, 인스턴스의 주소를 참조변수에 저장한다.
	    
		 4. 선언 위치에 따른 변수의 종류
		   - 전역변수(클래스변수, 인스턴스변수), 지역변수
		   - 인스턴스변수
		   	: 클래스의 영역에 선언되며, 클래스의 인스턴스를 생성할때 만들어진다.
		   	: 인스턴스 변수의 값을 읽어 오거나 저장하기 위해서는 인스턴스를 생성해야한다.
		   	: 인스턴스는 독립적인 저장공간을 가지므로 서로 다른 값을 가질 수 있다.
		   	  고유한 상태를 유지해야하는 속성의 경우 인스턴스변수로 만들어야한다.
		   
		   - 클래스변수
		    : 모든 인스턴스에서 공통적인 저장공간(변수)를 공유하게 된다.
		    : 한 클래스의 모든 인스턴스들이 공통적인 값을 유지해야 하는 경우 클래스 변수로 선언한다.
		    : 인스턴스 변수 앞에 static만 붙이면 된다.
		    
		   - 지역변수
		    : 메서드내에서 선언되며 메서드내에서만 사용 가능하다.
		    : 메서드 종료시 소멸된다.
		    
		 5. 메서드
		   - 어떠한 작업을 수행하기 위한 명령문의 집합
		   - 주로 어떤 값을 입력받아서 그 결과를 돌려준다.
		   - 입력받는 값이 없을 수도 결과를 돌려주지 않을 수도 있다.
		   - 반복적으로 사용되는 코드를 줄이기 위해서 사용한다.
		   - 작성방법
		   
		  	 반환타입 메서드명(변수타입 변수명, ....) {
		  	 	메서드 호출시 수행될 문장.
		  	 }
		  	 
		 6. return문
		   - 메서드가 정상적으로 종료되는 경우
		    : 메서드의 블럭{}의 마지막 부분까지 수행하였을 경우
		    : 메서드의 블럭{}내에서 return문을 만났을때
		   - 반환값
		    : 반환값이 없을 경우
		      return;
		    : 반환값이 있는 경우
		      return 반환값;
		   - 메서드의 반환타입과 반환값의 타입은 일치해야 한다.
		   
		 7. 메서드의 종류
		   - 클래스메서드 (static 메서드)
		    : 객체생성없이 '클래스명.메서드명()'으로 호출한다.
		    : 인스턴스 친구들과 관련되지 않는 작업을 한다.
		    : 클래스메서드내에서 인스턴스 변수나 메서드를 호출할 수 없다.   
		    : 메서드내(클래스메서드, 인스턴스메서드)에서 인스턴스 변수나 메서드를 사용하지 않는다면 클래스 메서드로 만들것을 고려하면 된다.
		   - 인스턴스 메서드
		    : 인스턴스를 생성후 '참조변수.메서드명()'으로 호출한다.
		    : 인스턴스 친구들과 관련된 작업을 한다.
		    : 메서드 내에서 인스턴스 친구들을 호출할 수 있다.
		    
		 8. 클래스멤버와 인스턴스멤버간의 호출관계
		   - 같은 클래스의 멤버간에는 객체생성이나 참조변수 없이 참조할 수 있다.
		     클래스 멤버들은 인스턴스 멤버들을 호출할 수 없다.
		   	
		 9. 재귀호출(recursive call)	
		   - 메서드 내부에서 메서드 자기자신을 다시 호출하는 것.
		 
		 10. 메서드 오버로딩
		   - 한 클래스내에 같은 이름의 메서드를 여러개 정의하는 것을 메서드 오버로딩이라고 한다.
		   - println() 대표적인 예이다.
		   - 조건
		    : 메서드의 명이 같아야 한다.
		    : 매개변수의 개수 또는 타입이 달라야 한다.
		    : 메서드의 리턴타입은 상관이 없다.
		   - 오버로딩의 장점
		    : 메서드의 이름만으로 구분된다면, 한 클래스 내의 모든 메서드의 이름은 달라야한다.
		    : 근본적으로 같은 기능을 하는 것인데 다른 이름으로 표현된다면 기억하기가 어렵다. 
		    : 메서드의 이름을 짓는데 고민을 덜 수 있다.
		    
		 11. 생성자
		   - 인스턴스가 생성될때 호출되는 인스턴스 초기화 메서드 입니다.
		     (인스턴스 변수의 초기화 작업에 주로 사용된다.)
		   - 특징
		     : 메서드처럼 클래스 내에 선언된다.
		     : 리턴값이 없다.
		       (생성자도 메서드이기 때문에 리턴타입에 void를 적어야 하지만 모든 생성자가 void이기 때문에 void를 생략한다.)  
		   - 정의방법
		     : 기본생성자
		        클래스명() {
		        
		       }
		     : 매개변수가 있는 생성자
		        클래스명(변수타입, 변수명, ....) {
		        
		       }
		   - 생성자에서 다른 생성자 호출하기
		     : 같은 클래스의 멤버들간에 서로 호출할 수 있는 것처럼 생성자 간에도 서로 호출할 수 있다.
		     : 조건
		       생성자의 이름으로 클래스의 이름 대신 this를 사용해야 한다.
		       한 생성자에서 다른 생성자를 호출할 때에는 반드시 첫줄에만 사용이 가능하다.  
		       
		 12. 변수의 초기화
		   - 변수를 선언하고 처음으로 값을 저장하는 것을 '변수의 초기화'라고 한다.
		   - 초기화 방법
		     : 명시적 초기화
		        변수의 선언과 동시에 초기화 하는 것
		     : 생성자를 이용한 초기화
		     : 초기화 블럭을 이용한 초기화 (변수의 복잡한 초기화의 경우 사용한다)
		        클래스초기화 블럭
		        인스턴스초기화 블럭		     
		   */
	
		
		
	}

}
